{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "creator",
    "curve_type",
    "decimals",
    "description",
    "external_permalink_uri",
    "name",
    "reserve_decimals",
    "reserve_denom",
    "staking_params",
    "symbol",
    "work"
  ],
  "properties": {
    "asset_uri": {
      "description": "(optional) an asset URI to store. Maybe this should be updateable in future?",
      "type": [
        "string",
        "null"
      ]
    },
    "creator": {
      "description": "the name of the artist, entity or creator. Should be unique, but obv this is tricky IRL",
      "type": "string"
    },
    "curve_type": {
      "description": "enum to store the curve parameters used for this contract if you want to add a custom Curve, you should make a new contract that imports this one. write a custom `instantiate`, and then dispatch `your::execute` -> `cw20_bonding::do_execute` with your custom curve as a parameter (and same with `query` -> `do_query`)",
      "allOf": [
        {
          "$ref": "#/definitions/CurveType"
        }
      ]
    },
    "decimals": {
      "description": "number of decimal places of the supply token, needed for proper curve math. If it is eg. BTC, where a balance of 10^8 means 1 BTC, then use 8 here.",
      "type": "integer",
      "format": "uint8",
      "minimum": 0.0
    },
    "description": {
      "description": "a free text description of the work. this is mainly for UI and interaction purposes though for this reason it is also required for the unlikely event that a work needs differentiating",
      "type": "string"
    },
    "external_permalink_uri": {
      "description": "meta: external link this should be a bandcamp URI, spotify URI, apple, youtube etc it is somewhat up to the artist to decide how to manage this a suggestion would be they set something up themselves or use a link aggregator to collect all the relevant links for a release it seems undesirable in a contract to have multiple URIs",
      "type": "string"
    },
    "name": {
      "description": "name of the supply token",
      "type": "string"
    },
    "reserve_decimals": {
      "description": "number of decimal places for the reserve token, needed for proper curve math. Same format as decimals above, eg. if it is uatom, where 1 unit is 10^-6 ATOM, use 6 here",
      "type": "integer",
      "format": "uint8",
      "minimum": 0.0
    },
    "reserve_denom": {
      "description": "this is the reserve token denom (only support native for now)",
      "type": "string"
    },
    "staking_params": {
      "description": "put all the staking params into a basket",
      "allOf": [
        {
          "$ref": "#/definitions/StakingParams"
        }
      ]
    },
    "symbol": {
      "description": "symbol / ticker of the supply token",
      "type": "string"
    },
    "work": {
      "description": "the name of the work. one would hope artist + work would at least be unique",
      "type": "string"
    }
  },
  "definitions": {
    "CurveType": {
      "anyOf": [
        {
          "description": "Constant always returns `value * 10^-scale` as spot price",
          "type": "object",
          "required": [
            "constant"
          ],
          "properties": {
            "constant": {
              "type": "object",
              "required": [
                "scale",
                "value"
              ],
              "properties": {
                "scale": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "value": {
                  "$ref": "#/definitions/Uint128"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Linear returns `slope * 10^-scale * supply` as spot price",
          "type": "object",
          "required": [
            "linear"
          ],
          "properties": {
            "linear": {
              "type": "object",
              "required": [
                "scale",
                "slope"
              ],
              "properties": {
                "scale": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "slope": {
                  "$ref": "#/definitions/Uint128"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "SquareRoot returns `slope * 10^-scale * supply^0.5` as spot price",
          "type": "object",
          "required": [
            "square_root"
          ],
          "properties": {
            "square_root": {
              "type": "object",
              "required": [
                "scale",
                "slope"
              ],
              "properties": {
                "scale": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "slope": {
                  "$ref": "#/definitions/Uint128"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Duration": {
      "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
      "anyOf": [
        {
          "type": "object",
          "required": [
            "height"
          ],
          "properties": {
            "height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Time in seconds",
          "type": "object",
          "required": [
            "time"
          ],
          "properties": {
            "time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "StakingParams": {
      "type": "object",
      "required": [
        "exit_tax",
        "min_withdrawal",
        "unbonding_period",
        "validator"
      ],
      "properties": {
        "exit_tax": {
          "description": "this is how much the owner takes as a cut when someone unbonds",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal"
            }
          ]
        },
        "min_withdrawal": {
          "description": "This is the minimum amount we will pull out to reinvest, as well as a minimum that can be unbonded (to avoid needless staking tx)",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "unbonding_period": {
          "description": "This is the unbonding period of the native staking module We need this to only allow claims to be redeemed after the money has arrived",
          "allOf": [
            {
              "$ref": "#/definitions/Duration"
            }
          ]
        },
        "validator": {
          "description": "This is the validator that all tokens will be bonded to",
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
