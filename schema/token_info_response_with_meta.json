{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "TokenInfoResponseWithMeta",
  "type": "object",
  "required": [
    "creator",
    "description",
    "external_permalink_uri",
    "token_info_response",
    "work"
  ],
  "properties": {
    "asset_uri": {
      "type": [
        "string",
        "null"
      ]
    },
    "creator": {
      "type": "string"
    },
    "description": {
      "type": "string"
    },
    "external_permalink_uri": {
      "type": "string"
    },
    "token_info_response": {
      "$ref": "#/definitions/TokenInfoResponse"
    },
    "work": {
      "type": "string"
    }
  },
  "definitions": {
    "TokenInfoResponse": {
      "type": "object",
      "required": [
        "decimals",
        "name",
        "symbol",
        "total_supply"
      ],
      "properties": {
        "decimals": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "total_supply": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
